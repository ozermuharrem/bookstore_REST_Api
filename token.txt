API erişimini kontrol etmek ve izin verilen kullanıcılara özel içerik sunmak için token işlemleri kullanabilirsiniz. 
Node.js ve MongoDB kullanarak token tabanlı kimlik doğrulama uygulamak için şu adımları izleyebilirsiniz:

jsonwebtoken paketinin kurulumu: Token oluşturmak ve doğrulamak için jsonwebtoken paketini kurmanız gerekiyor. 
Aşağıdaki komutu kullanarak paketi yükleyebilirsiniz:

npm install jsonwebtoken

Kullanıcı modelinin güncellenmesi: Kullanıcı modelinize password adlı bir alan ekleyin. Bu alan, kullanıcının şifresini depolayacak.

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  password: String
});

// Şifreyi hashleme
userSchema.pre('save', async function (next) {
  const user = this;
  if (!user.isModified('password')) return next();

  const salt = await bcrypt.genSalt(10);
  const hash = await bcrypt.hash(user.password, salt);
  user.password = hash;
  next();
});

// Şifreyi doğrulama
userSchema.methods.comparePassword = async function (candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

module.exports = mongoose.model('User', userSchema);

Kullanıcı doğrulama işleminin yapılması: Kullanıcı doğrulama işlemini gerçekleştirebilecek bir işlev oluşturmanız gerekiyor. 
Bu işlev, kullanıcının kimliğini doğrulayacak ve bir token döndürecektir.

const jwt = require('jsonwebtoken');
const User = require('./user.model');

async function authenticate(req, res) {
  const { email, password } = req.body;

  // Kullanıcının varlığını doğrulama
  const user = await User.findOne({ email });
  if (!user) {
    return res.status(404).json({ message: 'Kullanıcı bulunamadı' });
  }

  // Şifre doğrulama
  const isMatch = await user.comparePassword(password);
  if (!isMatch) {
    return res.status(401).json({ message: 'Geçersiz şifre' });
  }

  // Token oluşturma
  const token = jwt.sign({ userId: user._id }, 's3cr3t');

  res.json({ token });
}

Bu kod, authenticate adlı bir işlev oluşturur ve bu işlev, kullanıcı kimliğini doğrular, geçerli bir kullanıcı için bir token oluşturur ve 
token'i yanıt olarak gönderir.

API rotalarının korunması: Kullanıcı kimlik doğrulaması gerektiren rotalarınızı koruyun. 
Bunun için, bir middleware işlevi kullanabilirsiniz. Aşağıdaki kod, requireAuth adlı bir middleware işlevi tanımlar:

const jwt = require('jsonwebtoken');

function requireAuth(req, res, next) {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) {


