Problem Statement

Your task is to implement a CRUD API for a bookstore. Each book has the following attributes: title, description, author, year, and cover. You also need to create a Node.js library that wraps the API and requires authentication using client ID and secret key.

Requirements

Create a database schema for storing books in a database of your choice (e.g., MongoDB, PostgreSQL, MySQL).
Implement the following CRUD API endpoints for managing books:
GET /books - Retrieve all books
GET /books/:id - Retrieve a specific book by ID
POST /books - Create a new book
PUT /books/:id - Update a specific book by ID
DELETE /books/:id - Delete a specific book by ID
Each book should have the following attributes:
title (string, required)
description (string, required)
author (string, required)
year (number, required)
cover (string, optional)
The Node.js library should wrap the above API endpoints and provide a simple, easy-to-use interface for developers to interact with the API. The library should require authentication using a client ID and secret key.
The client ID and secret key should be generated by the server and provided to the client.
The API should reject requests that do not include a valid client ID and secret key.
The API should return an access token that the client can use for subsequent requests.
The access token should have a limited lifetime and should expire after a set period of time.
The API should allow clients to refresh their access token using a refresh token.
The API should be able to handle concurrent requests without data corruption or loss.

Constraints

The book titles can be up to 255 characters long.
The book descriptions can be up to 2000 characters long.
The book authors can be up to 255 characters long.
The book year must be a positive integer between 0 and the current year.
The book cover can be a URL string of up to 1000 characters.

Deliverables

A GitHub repository containing the Node.js library and API code.
A README.md file with instructions on how to use the library and API.
A sample client application that demonstrates the use of the library and API.
Evaluation Criteria

Functionality: The API must meet the requirements listed above and work correctly.
Code Quality: The code must be well-structured, easy to read, and maintainable.
Documentation: The code must be thoroughly documented with clear comments and a README file.
Security: The authentication mechanism should be secure and protect against common attacks such as replay attacks and brute force attacks.
Testing: The code should include unit tests to verify its correctness and ensure it is robust.
